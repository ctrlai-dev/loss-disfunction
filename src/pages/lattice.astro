---
// File: src/pages/lattice.astro
// Purpose: "The Lattice" coming-soon landing page (classified-terminal aesthetic)
// Notes: Drop directly into your Astro project. Uses in-file CSS + light JS.
// Replace <META_*> values and optional artwork path if desired.

const title = "THE LATTICE // ACCESS TERMINAL";
const description = "Initialization pending. World reconstruction in progress — the neural archive for Loss Disfunction.";
const image = "/lattice-in-the-frame.jpg"; // set to your public path (e.g., "/lattice-in-the-frame.jpg")
const url = "https://lossdisfunction.com/lattice";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={url} />
    <meta property="og:image" content={image} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />

    <style>
      :root {
        --bg: #0a0c0f;             /* near-black */
        --panel: #0e1319;          /* dark panel */
        --cyan: #00e5ff;           /* neon cyan */
        --cyan-2: #5df2ff;         /* softer cyan */
        --orange: #ff7a18;         /* accent orange */
        --orange-2: #ffa14a;       /* soft orange */
        --grid: rgba(0, 229, 255, 0.07);
        --muted: #a7b1bf;          /* muted text */
        --text: #e8f0f7;           /* primary text */
        --lime: #42b029;           /* TD green nod */
        --shadow: 0 10px 40px rgba(0,0,0,.6);
        --radius-xl: 18px;
        --radius-2xl: 26px;
      }

      * { box-sizing: border-box; }
      html, body { height: 100%; }
      body {
        margin: 0;
        background: radial-gradient(1200px 600px at 75% 20%, rgba(0,229,255,0.12), transparent 60%),
                    radial-gradient(900px 600px at 15% 80%, rgba(255,122,24,0.10), transparent 60%),
                    linear-gradient(180deg, #050609 0%, var(--bg) 40%, #06080b 100%);
        color: var(--text);
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
        letter-spacing: 0.2px;
      }

      .frame {
        min-height: 100dvh;
        display: grid;
        grid-template-rows: auto 1fr auto;
        padding: clamp(16px, 3vw, 32px);
        gap: clamp(16px, 2vw, 24px);
        position: relative;
        overflow: clip;
      }

      /* Hero background (4K image) */
      .hero-bg { position: absolute; inset: 0; z-index: 0; background-position: center 20%; background-size: cover; background-repeat: no-repeat; filter: saturate(1.05) contrast(1.02); will-change: transform; }
      .hero-bg::after { content: ""; position: absolute; inset: 0; background:
        radial-gradient(1200px 700px at 70% 20%, rgba(0,229,255,.25), rgba(0,229,255,0) 55%),
        linear-gradient(180deg, rgba(0,0,0,.25), rgba(0,0,0,.65)); }

      /* Subtle animated grid */
      .grid-overlay {
        position: absolute; inset: 0; pointer-events: none; opacity: .7;
        background-image:
          linear-gradient(rgba(255,255,255,0) 31px, var(--grid) 32px),
          linear-gradient(90deg, rgba(255,255,255,0) 31px, var(--grid) 32px);
        background-size: 32px 32px, 32px 32px;
        mask-image: radial-gradient(900px 600px at 50% 40%, black 0%, transparent 80%);
        animation: drift 18s linear infinite;
      }
      @keyframes drift { to { transform: translate3d(-16px,-16px,0); } }

      /* Boot intro */
      .boot-intro { 
        margin: 6px 0 18px; 
        padding: 10px 12px; 
        border-left: 3px solid var(--cyan); 
        background: linear-gradient(180deg, rgba(0,229,255,.06), rgba(0,229,255,.02));
        border-radius: 8px;
        opacity: 0; 
        transform: translateY(6px);
        animation: bootFade .9s ease-out .25s forwards;
      }
      .boot-intro .line { 
        font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; 
        font-size: 12px; 
        letter-spacing: .4px; 
        color: var(--cyan-2);
      }
      .boot-intro .line strong { color: var(--orange-2); font-weight: 600; }
      @keyframes bootFade { to { opacity: 1; transform: translateY(0); } }

      header .badge {
        width: max-content;
        display: inline-flex; align-items: center; gap: 10px;
        font-size: 12px; text-transform: uppercase; letter-spacing: 1.6px;
        color: var(--cyan);
        padding: 8px 12px; border: 1px solid rgba(0,229,255,.35); border-radius: 999px;
        background: linear-gradient(180deg, rgba(0,229,255,.08), rgba(0,229,255,.02));
        box-shadow: inset 0 0 0 1px rgba(0,229,255,.15);
        backdrop-filter: blur(2px);
      }
      header .badge::before {
        content: "◦"; color: var(--orange); filter: drop-shadow(0 0 6px rgba(255,122,24,.6));
      }

      .terminal {
        position: relative;
        border-radius: var(--radius-2xl);
        border: 1px solid rgba(255,255,255,.06);
        background: linear-gradient(180deg, rgba(14,19,25,.9), rgba(10,12,15,.85));
        box-shadow: var(--shadow), inset 0 0 0 1px rgba(255,255,255,.03);
        overflow: hidden;
      }

      .term-head {
        display: flex; align-items: center; justify-content: space-between;
        padding: 14px 18px; border-bottom: 1px solid rgba(255,255,255,.06);
        background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.00));
      }
      .dots { display: flex; gap: 8px; }
      .dot { width: 10px; height: 10px; border-radius: 999px; background: #39424e; }
      .dot.c { background: var(--orange); box-shadow: 0 0 0 2px rgba(255,122,24,.18), 0 0 10px rgba(255,122,24,.45) inset; }
      .dot.m { background: var(--lime); box-shadow: 0 0 0 2px rgba(66,176,41,.18), 0 0 10px rgba(66,176,41,.45) inset; }
      .dot.y { background: var(--cyan); box-shadow: 0 0 0 2px rgba(0,229,255,.18), 0 0 10px rgba(0,229,255,.45) inset; }

      .term-title { font-size: 12px; color: var(--muted); letter-spacing: 1px; text-transform: uppercase; }

      .term-body { padding: clamp(18px, 2.2vw, 28px); position: relative; }

      .kicker { color: var(--cyan-2); text-transform: uppercase; letter-spacing: 2.4px; font-size: 12px; opacity: .95; }
      h1 {
        margin: 8px 0 4px; font-size: clamp(28px, 4vw, 48px); line-height: 1.08;
        background: linear-gradient(90deg, var(--cyan), var(--orange-2));
        -webkit-background-clip: text; background-clip: text; color: transparent;
        text-shadow: 0 0 24px rgba(0,229,255,.18);
      }
      .subtitle { color: var(--muted); font-size: clamp(14px, 1.5vw, 16px); }

      pre.console {
        margin: 22px 0; padding: 16px 16px 16px 18px; border-radius: 12px;
        background: #0b0f14; border: 1px solid rgba(0,229,255,.18);
        color: var(--cyan-2); font-family: "IBM Plex Mono", ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
        font-size: 13px; line-height: 1.65; position: relative; overflow: hidden;
      }
      pre.console .cursor { display: inline-block; width: 7px; background: var(--cyan); animation: blink 1.1s steps(1,end) infinite; }
      @keyframes blink { 50% { opacity: 0; } }

      .panel {
        display: grid; gap: 18px;
        grid-template-columns: 1.15fr .85fr;
      }
      @media (max-width: 900px) { .panel { grid-template-columns: 1fr; } }

      .copy {
        background: linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.00));
        border: 1px solid rgba(255,255,255,.06); border-radius: var(--radius-xl);
        padding: clamp(16px, 2vw, 20px);
      }
      .copy p { margin: 0 0 10px; color: #d9e3ee; }
      .copy p strong { color: var(--cyan); }

      .cta-row { display: flex; gap: 12px; flex-wrap: wrap; margin-top: 10px; }
      .btn {
        appearance: none; border: 1px solid rgba(0,229,255,.35); color: var(--text);
        background: linear-gradient(180deg, rgba(0,229,255,.12), rgba(0,229,255,.04));
        padding: 10px 14px; border-radius: 12px; font-weight: 600; letter-spacing: .3px;
        text-decoration: none; display: inline-flex; align-items: center; gap: 10px;
        transition: transform .15s ease, box-shadow .15s ease, border-color .15s ease;
      }
      .btn:hover { transform: translateY(-1px); box-shadow: 0 10px 16px rgba(0,229,255,.12); border-color: rgba(0,229,255,.6); }
      .btn.orange { border-color: rgba(255,122,24,.35); background: linear-gradient(180deg, rgba(255,122,24,.14), rgba(255,122,24,.05)); }
      .btn.orange:hover { box-shadow: 0 10px 16px rgba(255,122,24,.16); border-color: rgba(255,122,24,.6); }

      /* Subscribe modal */
      .backdrop { position: fixed; inset: 0; background: rgba(0,0,0,.55); display: none; align-items: center; justify-content: center; z-index: 40; }
      .backdrop.show { display: flex; }
      .modal { width: min(560px, 92vw); border-radius: 16px; border: 1px solid rgba(255,255,255,.06); background: linear-gradient(180deg, rgba(14,19,25,.95), rgba(10,12,15,.92)); box-shadow: var(--shadow), inset 0 0 0 1px rgba(255,255,255,.03); padding: 18px; }
      .modal h2 { margin: 0 0 10px; font-size: 18px; color: var(--cyan-2); letter-spacing: .6px; }
      .field { display: grid; gap: 8px; margin-top: 10px; }
      label { font-size: 12px; color: var(--muted); letter-spacing: .4px; }
      input[type="email"] { width: 100%; padding: 10px 12px; border-radius: 10px; border: 1px solid rgba(0,229,255,.25); background: #0b0f14; color: var(--text); outline: none; }
      .row { display: flex; gap: 10px; margin-top: 14px; }
      .btn.ghost { border-color: rgba(255,255,255,.22); background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); }

      figure.node {
        margin: 0; padding: 0; border-radius: var(--radius-xl); overflow: hidden;
        border: 1px solid rgba(255,255,255,.06);
        background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.00));
        position: relative;
      }
      .node img { width: 100%; height: auto; display: block; opacity: .9; }
      .node figcaption {
        position: absolute; bottom: 0; left: 0; right: 0; padding: 10px 12px;
        background: linear-gradient(180deg, rgba(0,0,0,0), rgba(0,0,0,.55));
        font-size: 12px; color: var(--muted);
        display: flex; justify-content: space-between; align-items: center;
      }
      .pill {
        border: 1px solid rgba(255,255,255,.18); border-radius: 999px; padding: 4px 10px;
        font-size: 11px; letter-spacing: .5px; text-transform: uppercase; color: var(--cyan);
        background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
      }

      footer {
        display: flex; justify-content: space-between; align-items: center; gap: 10px;
        color: var(--muted); font-size: 12px; border-top: 1px solid rgba(255,255,255,.06);
        padding-top: 12px; margin-top: 6px;
      }

      /* Ambient particles */
      .particles { position: absolute; inset: 0; pointer-events: none; }
      .particle { position: absolute; width: 2px; height: 2px; background: var(--cyan); opacity: .7; filter: drop-shadow(0 0 6px var(--cyan)); }

      /* Motion-reduced safe */
      @media (prefers-reduced-motion: reduce) {
        .grid-overlay { animation: none !important; }
        .boot-intro { animation: none !important; opacity: 1 !important; transform: none !important; }
        .console .cursor { animation: none !important; }
      }
    </style>
  </head>

  <body>
    <div class="frame">
      <div id="hero" class="hero-bg" style={`background-image: url('${image}')`}></div>
      <div class="grid-overlay"></div>
      <div class="particles" id="particles" aria-hidden="true"></div>

      <header>
        <span class="badge">ACCESS GATEWAY • LOSS DISFUNCTION</span>
      </header>

      <main class="terminal" role="main">
        <div class="term-head">
          <div class="dots">
            <span class="dot c" aria-hidden="true"></span>
            <span class="dot m" aria-hidden="true"></span>
            <span class="dot y" aria-hidden="true"></span>
          </div>
          <div class="term-title">/neural/lattice · classified</div>
        </div>
        <div class="term-body">
          <div class="boot-intro" aria-live="polite">
            <div class="line">[ BOOT ] Neural lattice interface online.</div>
            <div class="line">[ AUTH ] Access token <strong>ACCEPTED</strong>.</div>
            <div class="line">[ STATUS ] Archive synchronization <strong>PENDING</strong>.</div>
          </div>
          <div class="kicker">SYSTEM LOG 0001</div>
          <h1>THE LATTICE // ACCESS TERMINAL</h1>
          <div class="subtitle">Initialization pending. World reconstruction in progress…</div>

          <pre class="console" id="console" aria-live="polite" aria-label="System console">
[ LATTICE_INITIALIZATION_PENDING ]\nWorld reconstruction in progress…\nNeural archives uploading…\nEmpathy strata synchronizing…\n\n> Awaiting strand compilation: entities, chronologies, fractures. <span class="cursor">\u00A0</span>
          </pre>

          <div class="panel">
            <section class="copy">
              <p>You’ve reached <strong>The Lattice</strong> — the central nervous system of <em>Loss Disfunction</em>. Here, memory is infrastructure. Every node is a life; every strand is a consequence. When the gate opens, you’ll traverse characters, systems, and the critical breakpoints that forged the Civil Synthesis Network.</p>
              <p>We’re assembling the strands now: <em>entities</em>, <em>locations</em>, <em>protocols</em>, <em>events</em>, and <em>logs</em>. What you’ll see is not a static wiki, but a living archive — a lattice that learns and refactors as the world clarifies.</p>
              <div class="cta-row">
                <button class="btn" id="open-subscribe" type="button" data-umami-event="subscribe-signal">Subscribe to the Signal</button>
                <a class="btn orange" href="/lore/">View System Logs</a>
                <a class="btn" href="/about">About the Project</a>
              </div>
            </section>

            <figure class="node">
              <img src={image} alt="Lattice visual node — ghost frame from inside the archive" loading="lazy" />
              <figcaption>
                <span class="pill">Visual Node</span>
                <span>Frame: Seed Protocol capture</span>
              </figcaption>
            </figure>
          </div>
        </div>
      </main>

      <footer>
        <span>© {new Date().getFullYear()} Loss Disfunction</span>
        <span>Build: <span style="color:var(--cyan)">LATTICE_INIT</span> • Status: <span style="color:var(--orange)">PENDING</span></span>
      </footer>
    </div>

    <!-- Netlify Subscribe Modal (progressive enhancement) -->
    <div id="subscribe-backdrop" class="backdrop" aria-hidden="true">
      <div class="modal" role="dialog" aria-modal="true" aria-labelledby="subscribe-title">
        <h2 id="subscribe-title">Subscribe to the Signal</h2>
        <form name="ld-subscribe" method="POST" data-netlify="true" netlify-honeypot="bot-field" action="/lattice?subscribed=1">
          <input type="hidden" name="form-name" value="ld-subscribe" />
          <p style="display:none">
            <label>Don’t fill this out: <input name="bot-field" /></label>
          </p>
          <div class="field">
            <label for="email">Email address</label>
            <input id="email" name="email" type="email" inputmode="email" autocomplete="email" required placeholder="you@example.com" />
          </div>
          <div class="row">
            <button class="btn" type="submit">Send</button>
            <button class="btn ghost" type="button" id="close-subscribe">Cancel</button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Type effect for console (non-blocking; respects existing content)
      (function() {
        const el = document.getElementById('console');
        if (!el) return;
        const reduce = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const lines = [
          "[ LATTICE_INITIALIZATION_PENDING ]",
          "World reconstruction in progress…",
          "Neural archives uploading…",
          "Empathy strata synchronizing…",
          "",
          "> Awaiting strand compilation: entities, chronologies, fractures."
        ];
        const base = lines.join("\n");
        // already printed in markup to avoid CLS; we just add a soft tick
        if (!reduce) {
          let tick = 0;
          setInterval(() => {
            tick = (tick + 1) % 4;
            el.innerHTML = base + " <span class=\"cursor\">\u00A0</span>";
          }, 900);
        }
      })();

      // Ambient particles
      (function() {
        const wrap = document.getElementById('particles');
        if (!wrap) return;
        const reduce = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const N = Math.min(70, Math.max(35, Math.floor(window.innerWidth / 24)));
        for (let i = 0; i < N; i++) {
          const p = document.createElement('div');
          p.className = 'particle';
          if (reduce) {
            // Static placement; no animation
            p.style.left = (Math.random()*100) + 'vw';
            p.style.top = (Math.random()*100) + 'vh';
          } else {
            reset(p, true);
          }
          wrap.appendChild(p);
        }
        if (!reduce) {
          function reset(p, init) {
            const x = Math.random() * 100;
            const y = init ? Math.random() * 100 : -2; // start above on recycle
            const s = Math.random() * 1.8 + 0.6; // speed
            const a = Math.random() * 0.8 + 0.2; // alpha
            p.style.left = x + 'vw';
            p.style.top = y + 'vh';
            p.style.opacity = a;
            p.style.transition = 'transform ' + (18 / s) + 's linear, opacity .6s ease';
            requestAnimationFrame(() => {
              p.style.transform = 'translate3d(' + (Math.random()*20-10) + 'vw, 110vh, 0)';
            });
            setTimeout(() => { reset(p, false); }, (18000 / s));
          }
        }
      })();

      // Subtle parallax for hero background
      (function() {
        const hero = document.getElementById('hero');
        if (!hero) return;
        // Resolve background image with fallbacks
        const candidates = [
          hero.style.backgroundImage?.match(/url\('(.*)'\)/)?.[1],
          '/lattice-in-the-frame.jpg',
          '/lattice.jpg',
          '/images/lattice-in-the-frame.jpg',
          '/assets/lattice-node-frame.jpg'
        ].filter(Boolean);
        (function tryNext(i){
          if (i >= candidates.length) return;
          const src = candidates[i];
          const img = new Image();
          img.onload = () => { hero.style.backgroundImage = "url('" + src + "')"; };
          img.onerror = () => tryNext(i+1);
          img.src = src;
        })(0);

        // Subtle parallax (motion-safe)
        const reduce = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        if (reduce) return;
        const onScroll = () => {
          const y = window.scrollY * 0.06; // gentle parallax
          hero.style.transform = 'translate3d(0,' + y + 'px,0)';
        };
        onScroll();
        window.addEventListener('scroll', onScroll, { passive: true });
      })();

      // Subscribe modal open/close
      (function() {
        const open = document.getElementById('open-subscribe');
        const closeBtn = document.getElementById('close-subscribe');
        const backdrop = document.getElementById('subscribe-backdrop');
        if (!open || !backdrop) return;
        const show = () => { backdrop.classList.add('show'); backdrop.setAttribute('aria-hidden','false'); document.getElementById('email')?.focus(); };
        const hide = () => { backdrop.classList.remove('show'); backdrop.setAttribute('aria-hidden','true'); };
        open.addEventListener('click', show, { passive: true });
        closeBtn?.addEventListener('click', hide, { passive: true });
        backdrop.addEventListener('click', (e) => { if (e.target === backdrop) hide(); }, { passive: true });
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape') hide(); });
        // Show lightweight confirmation if redirected after submit
        const url = new URL(location.href);
        if (url.searchParams.get('subscribed') === '1') {
          const div = document.createElement('div');
          div.textContent = 'Subscribed — thank you. Check your inbox.';
          div.style.position = 'fixed'; div.style.bottom = '16px'; div.style.left = '50%'; div.style.transform = 'translateX(-50%)';
          div.style.background = 'rgba(0,229,255,.15)'; div.style.border = '1px solid rgba(0,229,255,.35)'; div.style.color = '#e8f0f7';
          div.style.padding = '10px 14px'; div.style.borderRadius = '10px'; div.style.zIndex = '50';
          document.body.appendChild(div);
          setTimeout(() => div.remove(), 5000);
        }
      })();
    </script>
  </body>
 </html>


