---
interface Track {
  title: string; id?: string; spotify?: string; cover?: string; tags?: string[]; description?: string; slug?: string;
}
const { track } = Astro.props as { track: Track };

---
<article class="card h-[28rem] flex flex-col">
  <a
    href={track.slug ?? (track.id ? `https://youtube.com/watch?v=${track.id}` : "#")}
    target="_blank"
  >
    {track.cover ? (
      <img src={track.cover} alt={track.title} class="w-full aspect-video object-cover" loading="lazy" />
    ) : track.id ? (
      <img src={`https://img.youtube.com/vi/${track.id}/hqdefault.jpg`} alt={track.title} class="w-full aspect-video object-cover" loading="lazy" />
    ) : (
      <div class="w-full aspect-video bg-[#0e0e18]"></div>
    )}
  </a>
  <div class="p-4 flex-1 flex flex-col">
    <h3 class="font-semibold mb-1">{track.title}</h3>
    {track.description && (
      <div class="description text-sm mb-2 flex-1 overflow-y-auto whitespace-pre-line">
        {track.description}
      </div>
    )}
    {track.tags && track.tags.length > 0 && (
      <div class="flex flex-wrap gap-1 mt-2 flex-shrink-0">
        {track.tags.slice(0, 6).map(t => <span class="badge text-xs">{t}</span>)}
        {track.tags.length > 6 && <span class="badge text-xs">+{track.tags.length - 6}</span>}
      </div>
    )}
  </div>
</article>
