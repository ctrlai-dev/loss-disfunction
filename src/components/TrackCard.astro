---
interface Track {
  title: string; id?: string; spotify?: string; cover?: string; tags?: string[]; description?: string; slug?: string;
}
const { track } = Astro.props as { track: Track };

// Process description to format separators and other elements
function formatDescription(description: string) {
  return description
    .split('\n')
    .map(line => {
      const trimmedLine = line.trim();
      if (trimmedLine.startsWith('---')) {
        return `<div class="my-3"><code class="block bg-[#141428] text-[#d7d0ff] px-3 py-2 rounded text-xs font-mono border border-[#262649]">${trimmedLine}</code></div>`;
      } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
        return `<div class="font-semibold text-cyan mt-3 mb-1 text-xs font-mono">${trimmedLine}</div>`;
      } else if (trimmedLine.startsWith('#')) {
        const hashtags = trimmedLine.split(' ').filter(tag => tag.startsWith('#'));
        return `<div class="flex flex-wrap gap-1 mt-3">${hashtags.map(tag => `<span class="badge">${tag}</span>`).join('')}</div>`;
      } else if (trimmedLine === '') {
        return `<div class="h-2"></div>`;
      } else {
        return `<div class="mb-1 font-mono text-xs">${line}</div>`;
      }
    })
    .join('');
}
---
<article class="card h-[28rem] flex flex-col">
  <a href={track.slug ?? (track.id ? `https://youtube.com/watch?v=${track.id}` : '#')} target={track.slug ? undefined : '_blank'}>
    {track.cover ? (
      <img src={track.cover} alt={track.title} class="w-full aspect-video object-cover" loading="lazy" />
    ) : track.id ? (
      <img src={`https://img.youtube.com/vi/${track.id}/hqdefault.jpg`} alt={track.title} class="w-full aspect-video object-cover" loading="lazy" />
    ) : (
      <div class="w-full aspect-video bg-[#0e0e18]"></div>
    )}
  </a>
  <div class="p-4 flex-1 flex flex-col">
    <h3 class="font-semibold mb-1">{track.title}</h3>
    {track.description && (
      <div class="description text-sm mb-2 flex-1 overflow-y-auto max-h-48" set:html={formatDescription(track.description)}>
      </div>
    )}
    {track.tags && (
      <div class="flex flex-wrap gap-2 mt-auto">{track.tags.map(t => <span class="badge">{t}</span>)}</div>
    )}
  </div>
</article>
