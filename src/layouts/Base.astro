---
import '../styles/globals.css';
const { title = 'LOSS DISFUNCTION', description = 'Music • Story • Universe', pageClass = '' } = Astro.props;
---
<html lang="en" id="html-root">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="icon" href="/favicon.svg" />
    <link rel="preconnect" href="https://img.youtube.com" />
    <link rel="dns-prefetch" href="https://music.youtube.com" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <script is:inline>
      // Apply theme immediately on page load to prevent flash
      (function() {
        const stored = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const shouldBeDark = stored === 'dark' || (!stored && prefersDark);
        if (shouldBeDark) {
          document.documentElement.classList.remove('light');
        } else {
          document.documentElement.classList.add('light');
        }
      })();
    </script>
  </head>
  <body class={`min-h-screen ${pageClass}`}>
    <header class="sticky top-0 z-50 backdrop-blur bg-[#050507cc] border-b border-[#191927]">
      <div class="container flex items-center justify-between py-3">
        <a href="/" class="flex items-center">
          <img src="/ld_logo.png" alt="LOSS DISFUNCTION" class="h-10" />
        </a>
        
        <!-- Mobile menu button -->
        <button id="mobile-menu-button" class="md:hidden flex flex-col items-center justify-center w-8 h-8 space-y-1">
          <span class="block w-6 h-0.5 bg-ink transition-all duration-300"></span>
          <span class="block w-6 h-0.5 bg-ink transition-all duration-300"></span>
          <span class="block w-6 h-0.5 bg-ink transition-all duration-300"></span>
        </button>
        
        <!-- Desktop navigation -->
        <nav class="hidden md:flex gap-4 text-sm items-center">
          <a class="nav-link" href="/lattice">The Lattice</a>
          <a class="nav-link" href="/directives">Directives</a>
          <a class="nav-link" href="/archives">Archives</a>
          <a class="nav-link" href="/lexicon">Lexicon</a>
          <a class="nav-link" href="https://music.youtube.com/playlist?list=OLAK5uy_ngacUtBjeB86BXLOXpADUSHjf2_5cpl5o" target="_blank">Vox Requiem</a>
          <button id="theme-toggle" class="nav-link p-2 rounded-lg hover:bg-[#191927] transition-colors" aria-label="Toggle theme">
            <svg class="w-5 h-5 hidden dark-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
            <svg class="w-5 h-5 hidden light-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
          </button>
        </nav>
      </div>
      
      <!-- Mobile navigation menu -->
      <div id="mobile-menu" class="md:hidden hidden bg-[#050507cc] border-t border-[#191927]">
        <nav class="container py-4 flex flex-col gap-4 text-sm">
          <a class="nav-link" href="/lattice">The Lattice</a>
          <a class="nav-link" href="/directives">Directives</a>
          <a class="nav-link" href="/archives">Archives</a>
          <a class="nav-link" href="/lexicon">Lexicon</a>
          <a class="nav-link" href="https://music.youtube.com/playlist?list=OLAK5uy_ngacUtBjeB86BXLOXpADUSHjf2_5cpl5o" target="_blank">Vox Requiem</a>
          <button id="mobile-theme-toggle" class="nav-link p-2 rounded-lg hover:bg-[#191927] transition-colors text-left flex items-center gap-2" aria-label="Toggle theme">
            <svg class="w-5 h-5 hidden dark-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
            <svg class="w-5 h-5 hidden light-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
            Toggle Theme
          </button>
        </nav>
      </div>
    </header>
    <main>
      <slot />
    </main>
    <footer class="border-t border-[#191927] mt-16">
      <div class="container text-sm text-muted py-6 flex justify-between items-center">
        <div>© {new Date().getFullYear()} LOSS DISFUNCTION</div>
        <a href="mailto:seed@lossdisfunction.com?subject=Message from Loss Disfunction" class="text-cyan hover:text-violet transition-colors">Ping</a>
      </div>
    </footer>
    
    <script>
      // Mobile menu toggle - optimized for performance
      (function() {
        'use strict';
        let mobileMenuButton, mobileMenu;
        
        function init() {
          mobileMenuButton = document.getElementById('mobile-menu-button');
          mobileMenu = document.getElementById('mobile-menu');
          
          if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', toggleMenu, { passive: true });
          }
        }
        
        function toggleMenu() {
          const isHidden = mobileMenu.classList.contains('hidden');
          mobileMenu.classList.toggle('hidden');
          
          // Animate hamburger lines
          const spans = mobileMenuButton.querySelectorAll('span');
          if (isHidden) {
            // Transform to X
            spans[0].style.transform = 'rotate(45deg) translate(5px, 5px)';
            spans[1].style.opacity = '0';
            spans[2].style.transform = 'rotate(-45deg) translate(7px, -6px)';
          } else {
            // Reset to hamburger
            spans[0].style.transform = 'none';
            spans[1].style.opacity = '1';
            spans[2].style.transform = 'none';
          }
        }
        
        // Use requestIdleCallback if available, otherwise setTimeout
        if (window.requestIdleCallback) {
          requestIdleCallback(init);
        } else {
          setTimeout(init, 1);
        }
      })();
    </script>
    
    <script is:inline>
      // Theme toggle functionality
      (function() {
        function initThemeToggle() {
          const themeToggle = document.getElementById('theme-toggle');
          const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
          const html = document.documentElement;
          
          function updateThemeIcon(isLight) {
            // Update desktop toggle icons
            if (themeToggle) {
              const darkIcon = themeToggle.querySelector('.dark-icon');
              const lightIcon = themeToggle.querySelector('.light-icon');
              if (isLight) {
                darkIcon?.classList.remove('hidden');
                lightIcon?.classList.add('hidden');
              } else {
                darkIcon?.classList.add('hidden');
                lightIcon?.classList.remove('hidden');
              }
            }
            
            // Update mobile toggle icons
            if (mobileThemeToggle) {
              const darkIcon = mobileThemeToggle.querySelector('.dark-icon');
              const lightIcon = mobileThemeToggle.querySelector('.light-icon');
              if (isLight) {
                darkIcon?.classList.remove('hidden');
                lightIcon?.classList.add('hidden');
              } else {
                darkIcon?.classList.add('hidden');
                lightIcon?.classList.remove('hidden');
              }
            }
          }
          
          function toggleTheme() {
            const isLight = html.classList.contains('light');
            
            if (isLight) {
              html.classList.remove('light');
              localStorage.setItem('theme', 'dark');
              updateThemeIcon(false);
            } else {
              html.classList.add('light');
              localStorage.setItem('theme', 'light');
              updateThemeIcon(true);
            }
          }
          
          // Hide theme toggle on lattice page
          const currentPath = window.location.pathname;
          if (currentPath === '/lattice') {
            if (themeToggle) themeToggle.classList.add('hidden');
            if (mobileThemeToggle) mobileThemeToggle.classList.add('hidden');
          }
          
          // Set initial icon state
          updateThemeIcon(html.classList.contains('light'));
          
          // Add event listeners
          if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
          }
          if (mobileThemeToggle) {
            mobileThemeToggle.addEventListener('click', toggleTheme);
          }
        }
        
        // Initialize after DOM is ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initThemeToggle);
        } else {
          initThemeToggle();
        }
      })();
    </script>
  </body>
</html>
